buildscript {
    ext {
        springBootVersion = '1.5.4.RELEASE'
        springfoxVersion = '2.7.0'
        jacksonVersion = '2.8.8'
        //gradle
        gradleVersion = '2.5'
        //junit
        junitVersion = '4.12'
        //log4j
        log4jVersion = '1.2.16'
        //mybatis
        mybatisMapperVersion = '3.3.2'
        //mybatis
        mybatisVersion = '3.2.6'
        //mysql驱动
        mysqlVersion = '5.1.18'
        //mybatis-spring
        mybatisSpringVersion = '1.3.0'
        //generatorVersion
        generatorVersion = '1.3.2'
    }
    repositories {
        mavenCentral()
        maven { url 'http://repo.spring.io/plugins-release' }
    }
    dependencies {
        classpath("org.springframework.boot:spring-boot-gradle-plugin:${springBootVersion}")
        classpath('io.spring.gradle:propdeps-plugin:0.0.9.RELEASE')
    }
}

task wrapper(type: Wrapper) {
    description = 'Generates gradlew[.bat] scripts'
    gradleVersion = '3.5.1'
}

allprojects {
    repositories {
        mavenCentral()
    }
}

project(':start-code-autogenerator') {

    apply plugin: 'java'

    dependencies {
        compile "log4j:log4j:${log4jVersion}"
        compile "org.mybatis:mybatis:${mybatisVersion}"
        compile group: 'org.postgresql', name: 'postgresql', version: '42.1.1'
        compile "junit:junit:${junitVersion}"
        compile "org.mybatis:mybatis-spring:${mybatisSpringVersion}"
    }

    def getDbProperties = {
        def properties = new Properties()
        file("$rootDir/start-code-autogenerator/src/main/resources/jdbc.properties").withInputStream { inputStream ->
            properties.load(inputStream)
        }
        properties;
    }
    task mybatisGenerate << {
        def properties = getDbProperties()
        ant.properties['targetProject'] = projectDir.path
        ant.properties['driverClass'] = properties.getProperty("jdbc.driverClassName")
        ant.properties['connectionURL'] = properties.getProperty("jdbc.url")
        ant.properties['userId'] = properties.getProperty("jdbc.username")
        ant.properties['password'] = properties.getProperty("jdbc.password")
        ant.properties['src_main_java'] = sourceSets.main.java.srcDirs[0].path
        ant.properties['src_main_resources'] = sourceSets.main.resources.srcDirs[0].path
        ant.properties['modelPackage'] = "test.mybatis.pojo"
        ant.properties['mapperPackage'] = "test.mybatis.mapper"
        ant.properties['sqlMapperPackage'] = "mybatis"
        ant.taskdef(
                name: 'mbgenerator',
                classname: 'org.mybatis.generator.ant.GeneratorAntTask',
                classpath: configurations.mybatisGenerator.asPath
        )
        ant.mbgenerator(overwrite: true,
                configfile: 'src/main/resources/generatorConfig.xml', verbose: true) {
            propertyset {
                propertyref(name: 'targetProject')
                propertyref(name: 'userId')
                propertyref(name: 'driverClass')
                propertyref(name: 'connectionURL')
                propertyref(name: 'password')
                propertyref(name: 'src_main_java')
                propertyref(name: 'src_main_resources')
                propertyref(name: 'modelPackage')
                propertyref(name: 'mapperPackage')
                propertyref(name: 'sqlMapperPackage')
            }
        }
    }
}